# 3rd party
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

# Custom
from commands import *


async def handle_callback_query(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """
    Handle callback queries from inline keyboards.

    This function processes callback queries triggered by inline keyboards (telegram buttons),
    and performs different actions based on the received data.

    Args:
        update (telegram.Update): The incoming update from Telegram.
        context (telegram.ext.ContextTypes.DEFAULT_TYPE): The context for the update.

    Raises:
        ValueError: If the received data does not match any expected callback query.

    Example:
        >>> await handle_callback_query(update, context)

    The function performs the following actions based on the received data:
    - If the data is "/capabilities", it sends a message listing the bot's capabilities.
    - If the data is "/future", it sends a message listing the upcoming updates.
    - If the data is "/about_me", it sends a message explaining the purpose of the bot.
    ---
    - If the data is "/start_message", it triggers the start command.
    - If the data is "/friend", it triggers the friend command.
    - If the data is "/birthday", it triggers the birthday command.
    - If the data is "/math", it triggers the math command.
    - If the data is "/help", it triggers the help command.
    """
    query = update.callback_query
    data = query.data
    
    caps_text = "üîç –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"
    future_text = "üöÄ –ü–ª–∞–Ω—ã"
    about_text = "üëã –ß—Ç–æ —è –∏ –∑–∞—á–µ–º —è"
    start_text = "üöÄ –ù–∞ –Ω–∞—á–∞–ª–æ"

    keyboard = [
        [
            InlineKeyboardButton(caps_text, callback_data="/capabilities"),
            InlineKeyboardButton(future_text, callback_data="/future"),
        ],
        [
            InlineKeyboardButton(about_text, callback_data="/about_me"),
            InlineKeyboardButton(start_text, callback_data="/start_message"),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if data == "/capabilities":
        prompt = (
            "üîç –ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "\n/start - –ú–æ—ë –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"
            "\n/friend - –£–∑–Ω–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —Ç–≤–æ–µ–π –¥—Ä—É–∂–±—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
            "\n/birthday - –£–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ —Ç–≤–æ–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è"
            "\n/math - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏\n/help - –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ"
        )
        await query.edit_message_text(text=prompt, reply_markup=reply_markup)
    elif data == "/future":
        prompt = (
            "üöÄ –ë—É–¥—É—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n\n- –†–∞–Ω–¥–æ–º–∏–∑–∞—Ç–æ—Ä –∏–≥—Ä—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –æ–ø—Ä–æ—Å–æ–º"
            "\n- –£—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤ (–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ LLM)"
            "\n- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∞–± –≤ –î—Ä—É–∂–±—É –∫–∞–∂–¥—É—é —Å—Ä–µ–¥—É"
            "\n- –£—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /birthday —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è"
            "\n- –ú–∞–ª—ã–µ –ø—Ä–∞–≤–∫–∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"
        )
        await query.edit_message_text(text=prompt, reply_markup=reply_markup)
    elif data == "/about_me":
        prompt = (
            "üëã –ß—Ç–æ —è –∏ –∑–∞—á–µ–º —è:\n\n–Ø –¥—Ä—É–∂–Ω—ã–π –î—Ä—É–≥. –ú–µ–Ω—è —Å–æ–∑–¥–∞–ª –í–ª–∞–¥ —Å –Ω—É–ª—è –Ω–∞ –ø–∏—Ç–æ–Ω–µ –≤–º–µ—Å—Ç–æ —Ç–æ–≥–æ, "
            "—á—Ç–æ –±—ã –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –±–æ–ª–µ–µ –ø–æ–ª–µ–∑–Ω—ã–º–∏ –¥–µ–ª–∞–º–∏. –í–ª–∞–¥ –Ω–µ —É–º–µ–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∞—Å–∏–≤–æ, –ø–æ—ç—Ç–æ–º—É –µ–≥–æ –∫–æ–¥ –ª—É—á—à–µ –Ω–µ –≤–∏–¥–µ—Ç—å."
            "\n\n–°–æ–∑–¥–∞–Ω —è –ø–æ –±–æ–ª—å—à–µ–π —á–∞—Å—Ç–∏ –¥–ª—è –Ω–µ–±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –î—Ä—É–∂–±—ã. "
            "–ó–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ç—ã –±—ã–ª–∏ –≤–∑—è—Ç—ã —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ç–æ—Ä % –∏ –Ω–µ–±–æ–ª—å—à–∞—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞ –æ—Ç –ï–≤–≥–æ—Å–∏–∫–∞"
        )
        await query.edit_message_text(text=prompt, reply_markup=reply_markup)
    elif data == "/start_message":
        message_id = query.message.message_id
        chat_id = query.message.chat.id
        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
        await start_command(update, context)
    elif data == "/friend":
        await friend_command(update, context)
    elif data == "/birthday":
        await birthday_command(update, context)
    elif data == "/math":
        await math_command(update, context)
    elif data == "/help":
        await help_command(update, context)
